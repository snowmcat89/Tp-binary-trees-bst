SOIT
F UN FICHIER DE (CHAINES, chaine) BUFFER S ;
I,N : ENTIER ;
BST1 UN ARB DE CHAINE;
P UN ARB DE CHAINE;
Pr UN ARB DE CHAINE;
MOT UNE CHAINE ;
Possible UN BOOLEEN ;
CREER_ARB1 UNE ACTION;
MONTER_RACINE_BST1 UNE ACTION;
PIVOT_DROIT_BST1 UNE ACTION;
PIVOT_GAUCHE_BST1 UNE ACTION;
G UNE FILE DE ARB DE CHAINE ;
M UN POINTEUR VERS ARB DE CHAINE ;
RANDOM UN ENTIER;
ROTATION_BST2 UNE ACTION;
PIVOT_DROIT_BST2 UNE ACTION;
PIVOT_GAUCHE_BST2 UNE ACTION;
LENGTH UNE FONCTION (ENTIER);
CREER_ARB2 UNE ACTION;
RECH_BST1 UNE FONCTION (BOOLEEN);
RECH_BST2 UNE FONCTION (BOOLEEN);
RECH_BST3 UNE FONCTION (BOOLEEN);
PROFONDEUR UNE FONCTION (ENTIER);
BST2 UN ARB DE CHAINE;
MONTER_RACINE_BST3 UNE ACTION;
PIVOT_DROIT_BST3 UNE ACTION;
PIVOT_GAUCHE_BST3 UNE ACTION;
CREER_ARB3 UNE ACTION;
BST3 UNE ARB DE CHAINE;
TROUVE_MIN_SUP UNE FONCTION (CHAINE);
TROUVE_MAX_INF UNE FONCTION (CHAINE);
PRINT_WORDS_IN_RANGE UNE ACTION;
WORD1,WORD2 DES CHAINES;
PARCOURS_INFIXE_RANGE UNE ACTION;
COMPTE_YZA UNE FONCTION (ENTIER);
MENU_PRINCIPALE UNE ACTION;
INORDRE UNE ACTION ;
LE_MOT UNE CHAINE;
CHOICE UN ENTIER;
XYZ_LEVEL UNE ACTION;
FILLFICHIER UNE ACTION;



DEBUT
  APPEL FILLFICHIER(F,N);

APPEL MENU_PRINCIPALE;
         LIRE(CHOICE);

TQ (CHOICE<>9) :
 SI (CHOICE=1) :
         ECRIRE ('LES MOTS COMMENCANT PAR X,Y OU Z SONT :', COMPTE_YZA(BST1));
         APPEL MENU_PRINCIPALE;
         LIRE(CHOICE);
    SINON SI (CHOICE=2):
         ECRIRE ('LE PROFONDEUR L''ARBRE BST1 EST :' ,PROFONDEUR(BST1));
         APPEL MENU_PRINCIPALE;
         LIRE(CHOICE);
    SINON SI (CHOICE=3):
         ECRIRE ('LE PROFONDEUR L''ARBRE BST2 EST :',PROFONDEUR(BST2));
         APPEL MENU_PRINCIPALE;
         LIRE(CHOICE);
    SINON SI (CHOICE=4):
         ECRIRE ('LE PROFONDEUR L''ARBRE BST3 EST :',PROFONDEUR(BST3));
         APPEL MENU_PRINCIPALE;
         LIRE(CHOICE);
    SINON SI (CHOICE=5):
         ECRIRE ('LE PARCOURS INORDRE EST :');
         APPEL INORDRE(BST1);
         APPEL MENU_PRINCIPALE;
         LIRE(CHOICE);
    SINON SI (CHOICE=6):
         ECRIRE('L''ARBRE BST1:');
         APPEL XYZ_LEVEL(BST1);
         ECRIRE('L''ARBRE BST2:');
         APPEL XYZ_LEVEL(BST2);
         ECRIRE('L''ARBRE BST3:');
         APPEL XYZ_LEVEL(BST3);
         APPEL MENU_PRINCIPALE;
         LIRE(CHOICE);
    SINON SI (CHOICE=7):
         ECRIRE ('DONNER UN MOT A RECHERCHER');
         LIRE (LE_MOT);
         SI ((CARACT(LE_MOT,1)='Y') OU (CARACT(LE_MOT,1)='Z') OU (CARACT(LE_MOT,1)='a')):
            SI (RECH_BST1(BST1,LE_MOT)):
               ECRIRE ('LE MOT TROUVER');
            SINON
               ECRIRE ('LE MOT NON TROUVER');
            FSI;
         SINON SI ((CARACT(LE_MOT,1)>'Y') OU (CARACT(LE_MOT,1)>'Z') OU (CARACT(LE_MOT,1)>'a')):
               SI (RECH_BST2(BST2,LE_MOT)):
                  ECRIRE ('LE MOT TROUVER');
               SINON
                  ECRIRE ('LE MOT NON TROUVER');
               FSI;
         SINON SI ((CARACT(LE_MOT,1)<>'Y') OU (CARACT(LE_MOT,1)<>'Z') OU (CARACT(LE_MOT,1)<>'a')):
               SI (RECH_BST3(BST3,LE_MOT)):
                  ECRIRE ('LE MOT TROUVER');
               SINON
                  ECRIRE ('LE MOT NON TROUVER');
               FSI;
         FSI;
         FSI;
         FSI;

         APPEL MENU_PRINCIPALE;
         LIRE(CHOICE);
    SINON SI (CHOICE=8):
         ECRIRE ('DONNER LE PREMIER MOT');
         LIRE (WORD1);
         ECRIRE ('DONNER LE DEUXIMEE MOT');
         LIRE (WORD2);
         SI (WORD1<WORD2) :
            SI ((CARACT(WORD1,1)='Y') OU (CARACT(WORD1,1)='Z') OU (CARACT(WORD1,1)='a')):
               APPEL PRINT_WORDS_IN_RANGE (BST1,WORD1,WORD2);
            SINON SI ((CARACT(WORD1,1)>'Y') OU (CARACT(WORD1,1)>'Z') OU (CARACT(WORD1,1)>'a')):
               APPEL PRINT_WORDS_IN_RANGE (BST2,WORD1,WORD2);
            SINON SI ((CARACT(WORD1,1)<>'Y') OU (CARACT(WORD1,1)<>'Z') OU (CARACT(WORD1,1)<>'a')):
               APPEL PRINT_WORDS_IN_RANGE (BST3,WORD1,WORD2);
            FSI;
            FSI;
            FSI;
         SINON SI (WORD1>WORD2):
            SI ((CARACT(WORD2,1)='Y') OU (CARACT(WORD2,1)='Z') OU (CARACT(WORD2,1)='a')):
               APPEL PRINT_WORDS_IN_RANGE (BST1,WORD2,WORD1);
            SINON SI ((CARACT(WORD2,1)>'Y') OU (CARACT(WORD2,1)>'Z') OU (CARACT(WORD2,1)>'a')):
               APPEL PRINT_WORDS_IN_RANGE (BST2,WORD2,WORD1);
            SINON SI ((CARACT(WORD2,1)<>'Y') OU (CARACT(WORD2,1)<>'Z') OU (CARACT(WORD2,1)<>'a')):
               APPEL PRINT_WORDS_IN_RANGE (BST3,WORD2,WORD1);
            FSI;
            FSI;
            FSI;
         FSI;
         FSI;
         APPEL MENU_PRINCIPALE;
         LIRE(CHOICE);
    SINON SI (CHOICE=9):
         ECRIRE ('FIN DE PROGRAMME');
    SINON
    ECRIRE('Enter A Valid Choice');
    LIRE(CHOICE);
    FSI;
    FSI;
    FSI;
    FSI;
    FSI;
    FSI;
    FSI;
    FSI;
FSI;
FTQ;

FIN

ACTION MENU_PRINCIPALE

DEBUT
ECRIRE('=========================================================');
ECRIRE('=                PROJET RÉALISÉ PAR :                   ');
ECRIRE('=          GUENDOUZ FAHD & SID MOHAND AMAR              ');
ECRIRE('=========================================================');
ECRIRE('=========================================================');
ECRIRE('=                      MENU PRINCIPAL                   ');
ECRIRE('=========================================================');
ECRIRE('=  1/ Compter les mots commençant par Y, Z ou X         ');
ECRIRE('=                                                       ');
ECRIRE('=  2/ Calculer la profondeur de l''arbre BST01          ');
ECRIRE('=                                                       ');
ECRIRE('=  3/ Calculer la profondeur de l''arbre BST02          ');
ECRIRE('=                                                       ');
ECRIRE('=  4/ Calculer la profondeur de l''arbre BST03          ');
ECRIRE('=                                                       ');
ECRIRE('=  5/ Parcours inordre des trois arbres                 ');
ECRIRE('=                                                       ');
ECRIRE('=  6/ Nombre de nœuds commençant par Y,Z ou X par niveau');
ECRIRE('=                                                       ');
ECRIRE('=  7/ Rechercher un mot dans un des arbres              ');
ECRIRE('=                                                       ');
ECRIRE('=  8/ Rechercher des mots dans l''intervalle [A,B]      ');
ECRIRE('=                                                       ');
ECRIRE('=  9/ QUITTER                                           ');
ECRIRE('=========================================================');
ECRIRE('');
ECRIRE('Veuillez saisir votre choix (1-9) : ');
FIN

ACTION CREER_ARB1 (R,MOT,RG);
SOIENT
RG UN ARB DE CHAINE ;
R UN ARB DE CHAINE ;
RACINE UN ARB DE CHAINE;
MOT UNE CHAINE;
TREE UN ARB DE CHAINE ;
X,Y,Z DES CHAINES;
DEBUT
RACINE:=R;
X:='Y';
Y:='Z';
Z:='a';
SI (RACINE=NIL):
   CREER_ARB(RG,[MOT]);
   AFF_PERE(RG,NIL);

SINON SI INFO(RACINE)> MOT :
      SI FG(RACINE) = NIL :
         CREER_ARB(TREE,[MOT]);
         AFF_PERE(TREE,RACINE);
         AFF_FG(RACINE,TREE);
         SI (CARACT(MOT,1)=X)OU(CARACT(MOT,1)=Y)OU(CARACT(MOT,1)=Z) :
         APPEL MONTER_RACINE_BST1(TREE,RG);
         FSI;
      SINON
         APPEL CREER_ARB1(FG(RACINE),MOT,RG);
      FSI;
SINON SI INFO(RACINE)<MOT :
      SI FD(RACINE) = NIL :
         CREER_ARB(TREE,[MOT]);
         AFF_PERE(TREE,RACINE);
         AFF_FD(RACINE,TREE);
         SI (CARACT(MOT,1)=X)OU(CARACT(MOT,1)=Y)OU(CARACT(MOT,1)=Z) :
         APPEL MONTER_RACINE_BST1(TREE,RG);
         fsi;

      SINON
           APPEL CREER_ARB1(FD(RACINE),MOT,RG);
      FSI;
FSI;
FSI;
FSI;
FIN
ACTION FILLFICHIER(F,N)

SOIENT
F UN FICHIER DE (CHAINES, chaine) BUFFER S ;
I,N : ENTIER ;
DEBUT
OUVRIR ( F , 'F2.z' , 'N' ) ;
POUR I := 1 ,100
RANDOM:= ALEANOMBRE(5);
SI RANDOM = 4 :
init_struct(S, ['Y'+ALEACHAINE ( 5 ) , '']);
SINON SI RANDOM = 3:
     init_struct(S, ['Z'+ALEACHAINE ( 5 ) , '']);
     SINON SI RANDOM = 3:
     init_struct(S, ['a'+ALEACHAINE ( 5 ) , '']);
     SINON
     init_struct(S, [ALEACHAINE ( 5 ) , '']);
     FSI;
     FSI;
     FSI;

ECRIRESEQ ( F , S )
FPOUR ;
FERMER ( F ) ;
OUVRIR ( F , 'F2.z' , 'A' ) ;
I := 0 ;
TQ NON FINFICH ( F )
LIRESEQ ( F , S ) ;
MOT:=STRUCT(S,1);
APPEL CREER_ARB1(BST1,MOT,BST1);
APPEL CREER_ARB2(BST2,MOT,BST2);
APPEL CREER_ARB3(BST3,MOT,BST3);
I := I + 1
FTQ ;
FERMER ( F ) ;
FIN

ACTION ROTATION_BST2(NOEUD_PRINCIPALE,RACINE_GLOBALE);
SOIENT
NOEUD_PRINCIPALE UN ARB DE CHAINE;
RACINE_GLOBALE UN ARB DE CHAINE;
I,LENGT DES ENTIER;
DEBUT
 LENGT:=((LENGTH(RACINE_GLOBALE,NOEUD_PRINCIPALE))/ 2);
 POUR I:=1, LENGT:
   SI FG(PERE(NOEUD_PRINCIPALE))=NOEUD_PRINCIPALE;
      APPEL PIVOT_DROIT_BST2(PERE(NOEUD_PRINCIPALE),RACINE_GLOBALE);
   SINON
        APPEL PIVOT_GAUCHE_BST2(PERE(NOEUD_PRINCIPALE),RACINE_GLOBALE);
   FSI;
   FPOUR;
FIN

ACTION PIVOT_DROIT_BST2(NOEUD_PARENT, RACINE_ORIGINALE)
SOIENT
    NOEUD_PARENT, RACINE_ORIGINALE, ENFANT_G, GP, SOUS_ARBRE_D DES ARB DE CHAINE;
DEBUT
    ENFANT_G := FG(NOEUD_PARENT);
    SOUS_ARBRE_D := FD(ENFANT_G);
    GP := PERE(NOEUD_PARENT);

    AFF_FD(ENFANT_G, NOEUD_PARENT);
    AFF_FG(NOEUD_PARENT, SOUS_ARBRE_D);

    SI SOUS_ARBRE_D <> NIL
        AFF_PERE(SOUS_ARBRE_D, NOEUD_PARENT);
    FSI;

    AFF_PERE(ENFANT_G, GP);
    AFF_PERE(NOEUD_PARENT, ENFANT_G);

    SI GP = NIL
        RACINE_ORIGINALE := ENFANT_G;
    SINON SI FG(GP) = NOEUD_PARENT
        AFF_FG(GP, ENFANT_G);
    SINON
        AFF_FD(GP, ENFANT_G);
    FSI;
    FSI;
FIN

ACTION PIVOT_GAUCHE_BST2(NOEUD_PARENT, RACINE_ORIGINALE)
SOIENT
    NOEUD_PARENT, RACINE_ORIGINALE, ENFANT_D, GP, SOUS_ARBRE_G UN ARB DE CHAINE;
DEBUT
    ENFANT_D := FD(NOEUD_PARENT);

    SOUS_ARBRE_G := FG(ENFANT_D);
    GP := PERE(NOEUD_PARENT);

    AFF_FG(ENFANT_D, NOEUD_PARENT);
    AFF_FD(NOEUD_PARENT, SOUS_ARBRE_G);

    SI SOUS_ARBRE_G <> NIL
        AFF_PERE(SOUS_ARBRE_G, NOEUD_PARENT);
    FSI;

    AFF_PERE(ENFANT_D, GP);
    AFF_PERE(NOEUD_PARENT, ENFANT_D);

    SI GP = NIL
        RACINE_ORIGINALE := ENFANT_D;
    SINON SI FG(GP) = NOEUD_PARENT
        AFF_FG(GP, ENFANT_D);
    SINON
        AFF_FD(GP, ENFANT_D);
    FSI;
    FSI;
FIN


ACTION CREER_ARB2 (R,MOT,RG);
SOIENT
RG UN ARB DE CHAINE ;
R UN ARB DE CHAINE ;
RACINE UN ARB DE CHAINE;
MOT UNE CHAINE;
TREE UN ARB DE CHAINE ;
X,Y,Z DES CHAINES;
DEBUT
RACINE:=R;
X:='Y';
Y:='Z';
Z:='a';
SI (RACINE=NIL):
   CREER_ARB(RG,[MOT]);
   AFF_PERE(RG,NIL);

SINON SI INFO(RACINE)> MOT :
      SI FG(RACINE) = NIL :
         CREER_ARB(TREE,[MOT]);
         AFF_PERE(TREE,RACINE);
         AFF_FG(RACINE,TREE);
         SI (CARACT(MOT,1)=X)OU(CARACT(MOT,1)=Y)OU(CARACT(MOT,1)=Z) :
            APPEL ROTATION_BST2(TREE,RG);
         FSI;
      SINON
         APPEL CREER_ARB2(FG(RACINE),MOT,RG);
      FSI;
SINON SI INFO(RACINE)<MOT :
      SI FD(RACINE) = NIL :
         CREER_ARB(TREE,[MOT]);
         AFF_PERE(TREE,RACINE);
         AFF_FD(RACINE,TREE);
         SI (CARACT(MOT,1)=X)OU(CARACT(MOT,1)=Y)OU(CARACT(MOT,1)=Z) :
            APPEL ROTATION_BST2(TREE,RG);
         FSI;

      SINON
           APPEL CREER_ARB2(FD(RACINE),MOT,RG);
      FSI;
FSI;
FSI;
FSI;
FIN






ACTION MONTER_RACINE_BST1(NOEUD_PRINCIPALE,RACINE_GLOBALE);
SOIENT
NOEUD_PRINCIPALE UN ARB DE CHAINE;
RACINE_GLOBALE UN ARB DE CHAINE;
DEBUT
TQ PERE(NOEUD_PRINCIPALE)<>NIL:
   SI FG(PERE(NOEUD_PRINCIPALE))=NOEUD_PRINCIPALE;
      APPEL PIVOT_DROIT_BST1(PERE(NOEUD_PRINCIPALE),RACINE_GLOBALE);
   SINON
        APPEL PIVOT_GAUCHE_BST1(PERE(NOEUD_PRINCIPALE),RACINE_GLOBALE);
   FSI;
   FTQ;
FIN

ACTION PIVOT_DROIT_BST1(NOEUD_PARENT, RACINE_ORIGINALE)
SOIENT
    NOEUD_PARENT, RACINE_ORIGINALE UN ARB DE CHAINE;
    ENFANT_G, GP, SOUS_ARBRE_D UN ARB DE CHAINE;
DEBUT
    ENFANT_G := FG(NOEUD_PARENT);
    SOUS_ARBRE_D := FD(ENFANT_G);
    GP := PERE(NOEUD_PARENT);
    AFF_FD(ENFANT_G, NOEUD_PARENT);
    AFF_FG(NOEUD_PARENT, SOUS_ARBRE_D);

    SI SOUS_ARBRE_D <> NIL
        AFF_PERE(SOUS_ARBRE_D, NOEUD_PARENT);
    FSI;
    AFF_PERE(ENFANT_G, GP);
    AFF_PERE(NOEUD_PARENT, ENFANT_G);

    SI GP = NIL
        RACINE_ORIGINALE := ENFANT_G;
    SINON SI FG(GP) = NOEUD_PARENT
        AFF_FG(GP, ENFANT_G);
    SINON
        AFF_FD(GP, ENFANT_G);
    FSI;
    FSI;
FIN

ACTION PIVOT_GAUCHE_BST1(NOEUD_PARENT, RACINE_ORIGINALE)
SOIENT
    NOEUD_PARENT, RACINE_ORIGINALE UN ARB DE CHAINE;
    ENFANT_D, GP, SOUS_ARBRE_G UN ARB DE CHAINE;
DEBUT
    ENFANT_D := FD(NOEUD_PARENT);
    SOUS_ARBRE_G := FG(ENFANT_D);
    GP := PERE(NOEUD_PARENT);
    AFF_FG(ENFANT_D, NOEUD_PARENT);
    AFF_FD(NOEUD_PARENT, SOUS_ARBRE_G);
    SI SOUS_ARBRE_G <> NIL
        AFF_PERE(SOUS_ARBRE_G, NOEUD_PARENT);
    FSI;
    AFF_PERE(ENFANT_D, GP);
    AFF_PERE(NOEUD_PARENT, ENFANT_D);

    SI GP = NIL
        RACINE_ORIGINALE := ENFANT_D;
    SINON SI FG(GP) = NOEUD_PARENT
        AFF_FG(GP, ENFANT_D);
    SINON
        AFF_FD(GP, ENFANT_D);
    FSI;
    FSI;
FIN


FONCTION RECH_BST1(RACINE, VAL): BOOLEEN
SOIENT
    RACINE UN ARB DE CHAINE;
    P UN ARB DE CHAINE;
    VAL UNE CHAINE;
    TROUV UN BOOLEEN;
DEBUT
    TROUV := FAUX;
    P := RACINE;

    TQ (P <> NIL) ET (NON TROUV) :
        SI (CARACT(INFO(P),1)='Y') OU (CARACT(INFO(P),1)='Z') OU (CARACT(INFO(P),1)='a') :
            SI VAL = INFO(P) :
                TROUV := VRAI;
            SINON
                SI VAL < INFO(P) :
                    P := FG(P);
                SINON
                    P := FD(P);
                FSI;
            FSI;
        SINON
            SI VAL < INFO(P) :
                P := FG(P);
            SINON
                P := FD(P);
            FSI;
        FSI;
    FTQ;

    RECH_BST1:= TROUV;
FIN

FONCTION RECH_BST2(RACINE, VAL): BOOLEEN
SOIENT
    RACINE UN ARB DE CHAINE;
    P UN ARB DE CHAINE;
    VAL UNE CHAINE;
    TROUV UN BOOLEEN;
DEBUT
    TROUV := FAUX;
    P := RACINE;

    TQ (P <> NIL) ET (NON TROUV) :
        SI VAL = INFO(P) :
            TROUV := VRAI;
        SINON
            SI VAL < INFO(P) :
                P := FG(P);
            SINON
                P := FD(P);
            FSI;
        FSI;
    FTQ;

    RECH_BST2:= TROUV;
FIN

FONCTION RECH_BST3(RACINE, VAL): BOOLEEN
SOIENT
    RACINE UN ARB DE CHAINE;
    P UN ARB DE CHAINE;
    VAL UNE CHAINE;
    TROUV UN BOOLEEN;
DEBUT
    TROUV := FAUX;
    P := RACINE;

    TQ (P <> NIL) ET (NON TROUV) :
        SI (CARACT(INFO(P),1)<>'Y') ET (CARACT(INFO(P),1)<>'Z') ET (CARACT(INFO(P),1)<>'a') :
            SI VAL = INFO(P) :
                TROUV := VRAI;
            SINON
                SI VAL < INFO(P) :
                    P := FG(P);
                SINON
                    P := FD(P);
                FSI;
            FSI;
        SINON
            SI VAL < INFO(P) :
                P := FG(P);
            SINON
                P := FD(P);
            FSI;
        FSI;
    FTQ;

     RECH_BST3:=TROUV;
FIN

FONCTION PROFONDEUR(RACINE):ENTIER
SOIENT
RACINE UN ARB DE CHAINE;
DEBUT
SI (RACINE=NIL) :
PROFONDEUR:=-1;
SINON
PROFONDEUR:=1+MAX(PROFONDEUR(FG(RACINE)),PROFONDEUR(FD(RACINE)));
FSI;
FIN

FONCTION LENGTH(RACINE, MAILLON): ENTIER
SOIENT
    RACINE UN ARB DE CHAINE;
    MAILLON UN ARB DE CHAINE;
    CPT UN ENTIER;
    CURRENT UN ARB DE CHAINE;
DEBUT
    CPT := -1;
    SI (RACINE = NIL) OU (MAILLON = NIL)
        LENGTH := 0;
    SINON
        CURRENT := MAILLON;
        TQ (CURRENT <> RACINE) ET (CURRENT <> NIL)
            CPT := CPT + 1;
            CURRENT := PERE(CURRENT);
        FTQ;

        SI (CURRENT = RACINE)
            CPT := CPT + 1;
        FSI;
    FSI;
    LENGTH := CPT;
FIN

ACTION CREER_ARB3 (R,MOT,RG);
SOIENT
RG UN ARB DE CHAINE ;
R UN ARB DE CHAINE ;
RACINE UN ARB DE CHAINE;
MOT UNE CHAINE;
TREE UN ARB DE CHAINE ;
X,Y,Z DES CHAINES;
DEBUT
RACINE:=R;
X:='Y';
Y:='Z';
Z:='a';
SI (RACINE=NIL):
   CREER_ARB(RG,[MOT]);
   AFF_PERE(RG,NIL);

SINON SI INFO(RACINE)> MOT :
      SI FG(RACINE) = NIL :
         CREER_ARB(TREE,[MOT]);
         AFF_PERE(TREE,RACINE);
         AFF_FG(RACINE,TREE);
         SI (CARACT(MOT,1)<>X)ET(CARACT(MOT,1)<>Y)ET(CARACT(MOT,1)<>Z) :
            APPEL MONTER_RACINE_BST3(TREE,RG);
         FSI;
      SINON
         APPEL CREER_ARB3(FG(RACINE),MOT,RG);
      FSI;
SINON SI INFO(RACINE)<MOT :
      SI FD(RACINE) = NIL :
         CREER_ARB(TREE,[MOT]);
         AFF_PERE(TREE,RACINE);
         AFF_FD(RACINE,TREE);
         SI (CARACT(MOT,1)<>X)ET(CARACT(MOT,1)<>Y)ET(CARACT(MOT,1)<>Z) :
            APPEL MONTER_RACINE_BST3(TREE,RG);
         FSI;

      SINON
           APPEL CREER_ARB3(FD(RACINE),MOT,RG);
      FSI;
FSI;
FSI;
FSI;
FIN

ACTION MONTER_RACINE_BST3(NOEUD_PRINCIPALE,RACINE_GLOBALE);
SOIENT
NOEUD_PRINCIPALE UN ARB DE CHAINE;
RACINE_GLOBALE UN ARB DE CHAINE;
DEBUT
TQ PERE(NOEUD_PRINCIPALE)<>NIL:
   SI FG(PERE(NOEUD_PRINCIPALE))=NOEUD_PRINCIPALE;
      APPEL PIVOT_DROIT_BST3(PERE(NOEUD_PRINCIPALE),RACINE_GLOBALE);
   SINON
        APPEL PIVOT_GAUCHE_BST3(PERE(NOEUD_PRINCIPALE),RACINE_GLOBALE);
   FSI;
   FTQ;
FIN

ACTION PIVOT_DROIT_BST3(NOEUD_PARENT, RACINE_ORIGINALE)
SOIENT
    NOEUD_PARENT, RACINE_ORIGINALE UN ARB DE CHAINE;
    ENFANT_G, GP, SOUS_ARBRE_D UN ARB DE CHAINE;
DEBUT
    ENFANT_G := FG(NOEUD_PARENT);
    SOUS_ARBRE_D := FD(ENFANT_G);
    GP := PERE(NOEUD_PARENT);
    AFF_FD(ENFANT_G, NOEUD_PARENT);
    AFF_FG(NOEUD_PARENT, SOUS_ARBRE_D);

    SI SOUS_ARBRE_D <> NIL
        AFF_PERE(SOUS_ARBRE_D, NOEUD_PARENT);
    FSI;
    AFF_PERE(ENFANT_G, GP);
    AFF_PERE(NOEUD_PARENT, ENFANT_G);

    SI GP = NIL
        RACINE_ORIGINALE := ENFANT_G;
    SINON SI FG(GP) = NOEUD_PARENT
        AFF_FG(GP, ENFANT_G);
    SINON
        AFF_FD(GP, ENFANT_G);
    FSI;
    FSI;
FIN

ACTION PIVOT_GAUCHE_BST3(NOEUD_PARENT, RACINE_ORIGINALE)
SOIENT
    NOEUD_PARENT, RACINE_ORIGINALE UN ARB DE CHAINE;
    ENFANT_D, GP, SOUS_ARBRE_G UN ARB DE CHAINE;
DEBUT
    ENFANT_D := FD(NOEUD_PARENT);
    SOUS_ARBRE_G := FG(ENFANT_D);
    GP := PERE(NOEUD_PARENT);
    AFF_FG(ENFANT_D, NOEUD_PARENT);
    AFF_FD(NOEUD_PARENT, SOUS_ARBRE_G);
    SI SOUS_ARBRE_G <> NIL
        AFF_PERE(SOUS_ARBRE_G, NOEUD_PARENT);
    FSI;
    AFF_PERE(ENFANT_D, GP);
    AFF_PERE(NOEUD_PARENT, ENFANT_D);

    SI GP = NIL
        RACINE_ORIGINALE := ENFANT_D;
    SINON SI FG(GP) = NOEUD_PARENT
        AFF_FG(GP, ENFANT_D);
    SINON
        AFF_FD(GP, ENFANT_D);
    FSI;
    FSI;
FIN

FONCTION TROUVE_MIN_SUP(RACINE, WORD): CHAINE
SOIENT
    RACINE UN ARB DE CHAINE;
    WORD, RESULT UNE CHAINE;
    CURRENT UN ARB DE CHAINE;
DEBUT
    RESULT := '';
    CURRENT := RACINE;
    TQ CURRENT <> NIL:
        SI INFO(CURRENT) >= WORD
            RESULT := INFO(CURRENT);
            CURRENT := FG(CURRENT);
        SINON
            CURRENT := FD(CURRENT);
        FSI;
    FTQ;
    TROUVE_MIN_SUP:= RESULT;
FIN

FONCTION TROUVE_MAX_INF(RACINE, WORD): CHAINE
SOIENT
    RACINE UN ARB DE CHAINE;
    WORD, RESULT UNE CHAINE;
    CURRENT UN ARB DE CHAINE;
DEBUT
    RESULT := '';
    CURRENT := RACINE;
    TQ CURRENT <> NIL:
        SI INFO(CURRENT) <= WORD
            RESULT := INFO(CURRENT);
            CURRENT := FD(CURRENT);
        SINON
            CURRENT := FG(CURRENT);
        FSI;
    FTQ;
    TROUVE_MAX_INF:= RESULT;
FIN

ACTION PRINT_WORDS_IN_RANGE(RACINE, WORD1, WORD2)
SOIENT
    RACINE UN ARB DE CHAINE;
    WORD1, WORD2 UNE CHAINE;
    LOWER_BOUND, UPPER_BOUND UNE CHAINE;
    CURRENT UN ARB DE CHAINE;
DEBUT
    LOWER_BOUND := TROUVE_MIN_SUP(RACINE, WORD1);
    UPPER_BOUND := TROUVE_MAX_INF(RACINE, WORD2);
    SI (LOWER_BOUND <> '') ET (UPPER_BOUND <> '') ET (LOWER_BOUND <= UPPER_BOUND)
        CURRENT := RACINE;
        APPEL PARCOURS_INFIXE_RANGE(CURRENT, LOWER_BOUND, UPPER_BOUND);
    SINON
        ECRIRE('Aucun mot dans lintervalle.');
    FSI;
FIN

ACTION PARCOURS_INFIXE_RANGE(CURRENT, LOWER, UPPER)
SOIENT
    CURRENT UN ARB DE CHAINE;
    LOWER, UPPER UNE CHAINE;
DEBUT
    SI CURRENT <> NIL:

    SI LOWER < INFO(CURRENT)
        APPEL PARCOURS_INFIXE_RANGE(FG(CURRENT), LOWER, UPPER);
    FSI;
    SI (INFO(CURRENT) > LOWER )ET (INFO(CURRENT) <= UPPER)
        ECRIRE(INFO(CURRENT));
    FSI;
    SI INFO(CURRENT) <= UPPER
        APPEL PARCOURS_INFIXE_RANGE(FD(CURRENT), LOWER, UPPER);
    FSI;
    FSI;

FIN

FONCTION COMPTE_YZA(RACINE): ENTIER
SOIENT
    RACINE UN ARB DE CHAINE;
    CURRENT UN ARB DE CHAINE;
    COUNT UN ENTIER;
    P UNE PILE DE ARB DE CHAINE;
DEBUT
    COUNT := 0;
    SI RACINE <> NIL :

    EMPILER(P, RACINE);

    TQ NON PILEVIDE(P) :
        DEPILER(P,CURRENT);

        SI (CARACT(INFO(CURRENT), 1) = 'Y') OU(CARACT(INFO(CURRENT), 1) = 'Z') OU(CARACT(INFO(CURRENT), 1) = 'a'):
            COUNT := COUNT + 1;
        FSI;
        SI FD(CURRENT) <> NIL :
            EMPILER(P, FD(CURRENT));
        FSI;
        SI FG(CURRENT) <> NIL :
            EMPILER(P, FG(CURRENT));
        FSI;
    FTQ;
    FSI;
    COMPTE_YZA:= COUNT;

FIN
ACTION INORDRE(RACINE)
SOIENT
RACINE UN ARB DE CHAINE;
PIL UNE PILE DE ARB DE CHAINE;
P UN POINTEUR VERS UN ARB DE CHAINE;
POSSIBLE UN BOOLEEN;
DEBUT
ECRIRE ( 'PARCOURS ''INORDRE'' DE L''ARBRE' ) ;
       CREERPILE ( PIL ) ;
       P := RACINE ;
       Possible := VRAI ;
       TQ Possible :
           TQ P <> NIL :
               EMPILER ( PIL,P ) ;
               P := FG ( P )
           FTQ ;
           SI NON PILEVIDE ( PIL ) :
               DEPILER ( PIL , P ) ;
               ECRIRE ( INFO ( P ) ) ;
               P := FD ( P )
           SINON
               Possible := FAUX
           FSI;
       FTQ;
FIN

ACTION XYZ_LEVEL(ROOT);
SOIENT
    ROOT UN POINTEUR VERS ARB DE CHAINE;
    F1 UNE FILE DE ARB DE CHAINE;
    F2 UNE FILE DE ARB DE CHAINE;
    CPT_NIVEAU UN ENTIER;
    CPT_MOTS UN ENTIER;
    NIVEAU_ACTUEL UN ENTIER;
    P UN POINTEUR VERS ARB DE CHAINE;
    MARQUEUR UN ARB DE CHAINE;
DEBUT
    CPT_NIVEAU := 0;
    CREERFILE(F1);
    CREERFILE(F2);

    CREER_ARB(MARQUEUR, ['']);
    ENFILER(F1, ROOT);
    ENFILER(F1, MARQUEUR);

    NIVEAU_ACTUEL := 0;
    CPT_MOTS := 0;

    TQ NON FILEVIDE(F1) :
        DEFILER(F1, P);

        SI INFO(P) = '' :

            ECRIRE('DANS LE NIVEAU ', NIVEAU_ACTUEL, ' IL Y A ', CPT_MOTS, ' MOTS COMMENCANT PAR Y, Z OU a');

            SI NON FILEVIDE(F1) :

                ENFILER(F1, MARQUEUR);
                NIVEAU_ACTUEL := NIVEAU_ACTUEL + 1;
                CPT_MOTS := 0;
            FSI;
        SINON

            SI (CARACT(INFO(P),1) = 'Y') OU (CARACT(INFO(P),1) = 'Z') OU (CARACT(INFO(P),1) = 'a') :
                CPT_MOTS := CPT_MOTS + 1;
            FSI;


            SI FG(P) <> NIL :
                ENFILER(F1, FG(P));
            FSI;
            SI FD(P) <> NIL :
                ENFILER(F1, FD(P));
            FSI;
        FSI;
    FTQ;
FIN









